{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { getCategories } from '../../../api/category-api';\nimport storeApi from '../../../api/store-api';\nimport warehouseApi from '../../../api/warehouse-api';\nimport { ESaleChannel } from '../../../collections/sale-channel';\nconst storeSlide = createSlice({\n  name: 'store',\n  initialState: {\n    loading: true,\n    store: null,\n    warehouseId: null,\n    warehouses: [],\n    loadingWarehouse: false,\n    categories: []\n  },\n  reducers: {\n    loadStoreStart(state) {\n      state.loading = true;\n    },\n\n    loadStoreSuccess(state, action) {\n      state.loading = false;\n      state.store = action.payload;\n      state.warehouseId = action.payload._id;\n    },\n\n    loadStoreFailed(state) {\n      state.loading = false;\n      state.store = null;\n    },\n\n    selectWarehouse(state, action) {\n      state.warehouseId = action.payload;\n    },\n\n    loadWarehouseStart(state) {\n      state.loadingWarehouse = true;\n    },\n\n    loadWarehouseSuccess(state, action) {\n      state.warehouses = action.payload;\n      state.loadingWarehouse = false;\n    },\n\n    loadWarehouseFailed(state) {\n      state.warehouses = [];\n      state.loadingWarehouse = false;\n    },\n\n    loadCategoriesDone(state, action) {\n      state.categories = action.payload;\n    }\n\n  }\n});\nconst {\n  actions,\n  reducer\n} = storeSlide;\nexport const {\n  loadStoreStart,\n  loadStoreSuccess,\n  loadStoreFailed,\n  selectWarehouse,\n  loadWarehouseSuccess,\n  loadWarehouseFailed,\n  loadCategoriesDone\n} = actions;\nexport const loadStore = () => async dispatch => {\n  try {\n    dispatch(loadStoreStart());\n    let response = await storeApi.loadStore();\n\n    if (!(response.saleChannels || []).includes(ESaleChannel.POS)) {\n      let newSaleChannels = response.saleChannels ? [...response.saleChannels, ESaleChannel.POS] : [ESaleChannel.POS];\n      response.saleChannels = newSaleChannels;\n      await storeApi.updateStore(response._id, {\n        saleChannels: newSaleChannels\n      });\n    }\n\n    dispatch(loadStoreSuccess(response));\n  } catch (error) {\n    dispatch(loadStoreFailed());\n  }\n};\nexport const loadWarehouse = () => async (dispatch, getState) => {\n  try {\n    let store = getState().store.store;\n    const response = await warehouseApi.loadWarehouse({\n      storeId: store._id\n    });\n    dispatch(loadWarehouseSuccess(response.data));\n  } catch (error) {\n    dispatch(loadWarehouseFailed());\n  }\n};\nexport const loadCategories = () => async (dispatch, getState) => {\n  try {\n    const store = getState().store.store;\n    const response = await getCategories({\n      storeId: store._id,\n      page: 1,\n      limit: 20\n    });\n    dispatch(loadCategoriesDone(response));\n  } catch (error) {\n    dispatch(loadCategoriesDone([]));\n  }\n};\nexport default reducer;","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/PosClient/src/features/dashboard/state/store-slide.ts"],"names":["createSlice","getCategories","storeApi","warehouseApi","ESaleChannel","storeSlide","name","initialState","loading","store","warehouseId","warehouses","loadingWarehouse","categories","reducers","loadStoreStart","state","loadStoreSuccess","action","payload","_id","loadStoreFailed","selectWarehouse","loadWarehouseStart","loadWarehouseSuccess","loadWarehouseFailed","loadCategoriesDone","actions","reducer","loadStore","dispatch","response","saleChannels","includes","POS","newSaleChannels","updateStore","error","loadWarehouse","getState","storeId","data","loadCategories","page","limit"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { getCategories } from '../../../api/category-api';\nimport storeApi from '../../../api/store-api';\nimport warehouseApi from '../../../api/warehouse-api';\nimport { ICategory } from '../../../collections/category';\nimport { ESaleChannel } from '../../../collections/sale-channel';\nimport { IStore } from '../../../collections/store';\nimport { IWarehouse } from '../../../collections/warehouse';\n\ninterface IStoreState {\n    loading: boolean;\n    store: IStore;\n    warehouseId: string;\n    warehouses: IWarehouse[];\n    loadingWarehouse: boolean;\n    categories: ICategory[];\n}\n\nconst storeSlide = createSlice({\n    name: 'store',\n    initialState: {\n        loading: true,\n        store: null,\n        warehouseId: null,\n        warehouses: [],\n        loadingWarehouse: false,\n        categories: [],\n    },\n\n    reducers: {\n        loadStoreStart(state) {\n            state.loading = true;\n        },\n        loadStoreSuccess(state, action) {\n            state.loading = false;\n            state.store = action.payload;\n            state.warehouseId = action.payload._id;\n        },\n        loadStoreFailed(state) {\n            state.loading = false;\n            state.store = null;\n        },\n        selectWarehouse(state, action) {\n            state.warehouseId = action.payload;\n        },\n        loadWarehouseStart(state) {\n            state.loadingWarehouse = true;\n        },\n        loadWarehouseSuccess(state, action) {\n            state.warehouses = action.payload;\n            state.loadingWarehouse = false;\n        },\n        loadWarehouseFailed(state) {\n            state.warehouses = [];\n            state.loadingWarehouse = false;\n        },\n        loadCategoriesDone(state, action) {\n            state.categories = action.payload;\n        },\n    },\n});\n\nconst { actions, reducer } = storeSlide;\n\nexport const {\n    loadStoreStart,\n    loadStoreSuccess,\n    loadStoreFailed,\n    selectWarehouse,\n    loadWarehouseSuccess,\n    loadWarehouseFailed,\n    loadCategoriesDone,\n} = actions;\n\nexport const loadStore = () => async (dispatch: any) => {\n    try {\n        dispatch(loadStoreStart());\n\n        let response = await storeApi.loadStore();\n\n        if (!(response.saleChannels || []).includes(ESaleChannel.POS)) {\n            let newSaleChannels = response.saleChannels\n                ? [...response.saleChannels, ESaleChannel.POS]\n                : [ESaleChannel.POS];\n\n            response.saleChannels = newSaleChannels;\n            await storeApi.updateStore(response._id as string, {\n                saleChannels: newSaleChannels,\n            });\n        }\n\n        dispatch(loadStoreSuccess(response));\n    } catch (error) {\n        dispatch(loadStoreFailed());\n    }\n};\n\nexport const loadWarehouse = () => async (dispatch: any, getState: any) => {\n    try {\n        let store = getState().store.store;\n        const response = await warehouseApi.loadWarehouse({ storeId: store._id });\n\n        dispatch(loadWarehouseSuccess(response.data));\n    } catch (error) {\n        dispatch(loadWarehouseFailed());\n    }\n};\n\nexport const loadCategories = () => async (dispatch: any, getState: any) => {\n    try {\n        const store = getState().store.store;\n\n        const response = await getCategories({\n            storeId: store._id,\n            page: 1,\n            limit: 20,\n        });\n\n        dispatch(loadCategoriesDone(response));\n    } catch (error) {\n        dispatch(loadCategoriesDone([]));\n    }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}