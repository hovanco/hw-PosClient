{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport locationApi from '../../../../api/location-api';\n\nconst useProvices = () => {\n  _s();\n\n  const [provinces, setProvinces] = useState([]);\n  const [loadingProvince, setLoadingProvince] = useState(true);\n  useEffect(() => {\n    async function getListProvinces() {\n      try {\n        const response = await locationApi.getProvinces();\n        setProvinces(response);\n        setLoadingProvince(false);\n      } catch (error) {\n        setProvinces([]);\n        setLoadingProvince(false);\n      }\n    }\n\n    getListProvinces();\n  }, []);\n  return {\n    provinces,\n    loadingProvince\n  };\n};\n\n_s(useProvices, \"E2XqBnaySWVvLrbqLcEHQyTOMWw=\");\n\nconst useDistricts = province => {\n  _s2();\n\n  const [districts, setDistricts] = useState([]);\n  const [loadingDistrict, setLoadingDistrict] = useState(false);\n  useEffect(() => {\n    async function getListDistricts() {\n      if (!province) return;\n      setLoadingDistrict(true);\n\n      try {\n        const response = await locationApi.getDistricts(province);\n        setDistricts(response);\n        setLoadingDistrict(false);\n      } catch (error) {\n        setDistricts([]);\n        setLoadingDistrict(false);\n      }\n    }\n\n    getListDistricts();\n  }, [province]);\n  return {\n    districts,\n    loadingDistrict\n  };\n};\n\n_s2(useDistricts, \"UvqoTn7ipfUtg+N/Qf+GUEmuzkE=\");\n\nconst useWards = ({\n  province,\n  district\n}) => {\n  _s3();\n\n  const [wards, setWards] = useState([]);\n  const [loadingWard, setLoadingWard] = useState(false);\n  useEffect(() => {\n    async function getListWard() {\n      if (!province || !district) return;\n      setLoadingWard(true);\n\n      try {\n        const response = await locationApi.getWards({\n          provinceId: province,\n          districtId: district\n        });\n        setWards(response);\n        setLoadingWard(false);\n      } catch (error) {\n        setWards([]);\n        setLoadingWard(false);\n      }\n    }\n\n    getListWard();\n  }, [district, province]);\n  return {\n    wards,\n    loadingWard\n  };\n};\n\n_s3(useWards, \"G2x4XCozlbfF48x4yxkNfgDEYWk=\");\n\nexport { useProvices, useDistricts, useWards };","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/PosClient/src/features/dashboard/components/add-customer/hook.tsx"],"names":["useEffect","useState","locationApi","useProvices","provinces","setProvinces","loadingProvince","setLoadingProvince","getListProvinces","response","getProvinces","error","useDistricts","province","districts","setDistricts","loadingDistrict","setLoadingDistrict","getListDistricts","getDistricts","useWards","district","wards","setWards","loadingWard","setLoadingWard","getListWard","getWards","provinceId","districtId"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport locationApi from '../../../../api/location-api';\nimport { District, Province, Ward } from './interface';\n\nconst useProvices = () => {\n    const [provinces, setProvinces] = useState<Province[]>([]);\n    const [loadingProvince, setLoadingProvince] = useState<boolean>(true);\n\n    useEffect(() => {\n        async function getListProvinces() {\n            try {\n                const response = await locationApi.getProvinces();\n\n                setProvinces(response);\n                setLoadingProvince(false);\n            } catch (error) {\n                setProvinces([]);\n                setLoadingProvince(false);\n            }\n        }\n        getListProvinces();\n    }, []);\n\n    return {\n        provinces,\n        loadingProvince,\n    };\n};\n\nconst useDistricts = (province?: string) => {\n    const [districts, setDistricts] = useState<District[]>([]);\n\n    const [loadingDistrict, setLoadingDistrict] = useState<boolean>(false);\n\n    useEffect(() => {\n        async function getListDistricts() {\n            if (!province) return;\n\n            setLoadingDistrict(true);\n\n            try {\n                const response = await locationApi.getDistricts(province);\n\n                setDistricts(response);\n                setLoadingDistrict(false);\n            } catch (error) {\n                setDistricts([]);\n                setLoadingDistrict(false);\n            }\n        }\n\n        getListDistricts();\n    }, [province]);\n\n    return {\n        districts,\n        loadingDistrict,\n    };\n};\n\nconst useWards = ({ province, district }: { province?: string; district?: string }) => {\n    const [wards, setWards] = useState<Ward[]>([]);\n    const [loadingWard, setLoadingWard] = useState<boolean>(false);\n\n    useEffect(() => {\n        async function getListWard() {\n            if (!province || !district) return;\n            setLoadingWard(true);\n            try {\n                const response = await locationApi.getWards({\n                    provinceId: province,\n                    districtId: district,\n                });\n                setWards(response);\n                setLoadingWard(false);\n            } catch (error) {\n                setWards([]);\n                setLoadingWard(false);\n            }\n        }\n        getListWard();\n    }, [district, province]);\n\n    return {\n        wards,\n        loadingWard,\n    };\n};\n\nexport { useProvices, useDistricts, useWards };\n"]},"metadata":{},"sourceType":"module"}