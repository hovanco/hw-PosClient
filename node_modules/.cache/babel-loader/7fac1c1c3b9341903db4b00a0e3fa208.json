{"ast":null,"code":"var _jsxFileName = \"/Users/mac3/Desktop/workspace/PosClient/src/features/dashboard/components/card-search-customer/search-customer.tsx\",\n    _s = $RefreshSig$();\n\nimport { debounce } from 'lodash';\nimport React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport customerApi from '../../../../api/customer-api';\nimport SearchDropdown from '../../../../components/search-dropdown';\nimport useLoading from '../../../../hook/useLoading';\nimport Customers from './customers';\nimport InputSearch from './input-search';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SearchCustomer = props => {\n  _s();\n\n  const store = useSelector(state => state.store.store);\n  const {\n    loading,\n    handleLoading\n  } = useLoading(false);\n  const [customers, setCustomers] = useState([]);\n  const [optionGuest, setOptionGuest] = useState(true);\n  const onChange = debounce(textString => {\n    if (!textString) {\n      setOptionGuest(true);\n    } else {\n      setOptionGuest(false);\n    }\n\n    handleLoading(true);\n    customerApi.searchCustomers({\n      storeId: store._id,\n      search: textString\n    }).then(res => {\n      setCustomers(res);\n    }).finally(() => {\n      handleLoading(false);\n    });\n  }, 500);\n  useEffect(() => {\n    onChange();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(SearchDropdown, {\n    className: \"search-customer\",\n    input: /*#__PURE__*/_jsxDEV(InputSearch, {\n      onChange: onChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 60\n    }, this),\n    children: /*#__PURE__*/_jsxDEV(Customers, {\n      customers: customers,\n      loading: loading,\n      optionGuest: optionGuest\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SearchCustomer, \"KRPfc3cjGS66JbIvsvls3iqCZgQ=\", false, function () {\n  return [useSelector, useLoading];\n});\n\n_c = SearchCustomer;\nexport default SearchCustomer;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchCustomer\");","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/PosClient/src/features/dashboard/components/card-search-customer/search-customer.tsx"],"names":["debounce","React","useState","useEffect","useSelector","customerApi","SearchDropdown","useLoading","Customers","InputSearch","SearchCustomer","props","store","state","loading","handleLoading","customers","setCustomers","optionGuest","setOptionGuest","onChange","textString","searchCustomers","storeId","_id","search","then","res","finally"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,QAAzB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AAEA,OAAOC,cAAP,MAA2B,wCAA3B;AACA,OAAOC,UAAP,MAAuB,6BAAvB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;;;AAIA,MAAMC,cAAc,GAAIC,KAAD,IAAkB;AAAA;;AACrC,QAAMC,KAAK,GAAGR,WAAW,CAAES,KAAD,IAAgBA,KAAK,CAACD,KAAN,CAAYA,KAA7B,CAAzB;AAEA,QAAM;AAAEE,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAA6BR,UAAU,CAAC,KAAD,CAA7C;AAEA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4Bf,QAAQ,CAAc,EAAd,CAA1C;AAEA,QAAM,CAACgB,WAAD,EAAcC,cAAd,IAAgCjB,QAAQ,CAAU,IAAV,CAA9C;AAEA,QAAMkB,QAAQ,GAAGpB,QAAQ,CAAEqB,UAAD,IAAyB;AAC/C,QAAI,CAACA,UAAL,EAAiB;AACbF,MAAAA,cAAc,CAAC,IAAD,CAAd;AACH,KAFD,MAEO;AACHA,MAAAA,cAAc,CAAC,KAAD,CAAd;AACH;;AAEDJ,IAAAA,aAAa,CAAC,IAAD,CAAb;AAEAV,IAAAA,WAAW,CACNiB,eADL,CACqB;AACbC,MAAAA,OAAO,EAAEX,KAAK,CAACY,GADF;AAEbC,MAAAA,MAAM,EAAEJ;AAFK,KADrB,EAKKK,IALL,CAKWC,GAAD,IAAS;AACXV,MAAAA,YAAY,CAACU,GAAD,CAAZ;AACH,KAPL,EAQKC,OARL,CAQa,MAAM;AACXb,MAAAA,aAAa,CAAC,KAAD,CAAb;AACH,KAVL;AAWH,GApBwB,EAoBtB,GApBsB,CAAzB;AAsBAZ,EAAAA,SAAS,CAAC,MAAM;AACZiB,IAAAA,QAAQ;AACX,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACI,QAAC,cAAD;AAAgB,IAAA,SAAS,EAAC,iBAA1B;AAA4C,IAAA,KAAK,eAAE,QAAC,WAAD;AAAa,MAAA,QAAQ,EAAEA;AAAvB;AAAA;AAAA;AAAA;AAAA,YAAnD;AAAA,2BACI,QAAC,SAAD;AACI,MAAA,SAAS,EAAEJ,SADf;AAEI,MAAA,OAAO,EAAEF,OAFb;AAGI,MAAA,WAAW,EAAEI;AAHjB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CA5CD;;GAAMR,c;UACYN,W,EAEqBG,U;;;KAHjCG,c;AA8CN,eAAeA,cAAf","sourcesContent":["import { debounce } from 'lodash';\nimport React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport customerApi from '../../../../api/customer-api';\nimport { ICustomer } from '../../../../collections/customer';\nimport SearchDropdown from '../../../../components/search-dropdown';\nimport useLoading from '../../../../hook/useLoading';\nimport Customers from './customers';\nimport InputSearch from './input-search';\n\ninterface Props {}\n\nconst SearchCustomer = (props: Props) => {\n    const store = useSelector((state: any) => state.store.store);\n\n    const { loading, handleLoading } = useLoading(false);\n\n    const [customers, setCustomers] = useState<ICustomer[]>([]);\n\n    const [optionGuest, setOptionGuest] = useState<boolean>(true);\n\n    const onChange = debounce((textString?: string) => {\n        if (!textString) {\n            setOptionGuest(true);\n        } else {\n            setOptionGuest(false);\n        }\n\n        handleLoading(true);\n\n        customerApi\n            .searchCustomers({\n                storeId: store._id,\n                search: textString,\n            })\n            .then((res) => {\n                setCustomers(res);\n            })\n            .finally(() => {\n                handleLoading(false);\n            });\n    }, 500);\n\n    useEffect(() => {\n        onChange();\n    }, []);\n\n    return (\n        <SearchDropdown className='search-customer' input={<InputSearch onChange={onChange} />}>\n            <Customers\n                customers={customers}\n                loading={loading}\n                optionGuest={optionGuest}\n            />\n        </SearchDropdown>\n    );\n};\n\nexport default SearchCustomer;\n"]},"metadata":{},"sourceType":"module"}