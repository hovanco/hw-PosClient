{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport authApi from '../api/auth-api';\nimport { getToken } from '../api/token';\nimport { loadUser, logout } from '../features/auth/state/auth-slide';\nexport function useProgressAuth() {\n  _s();\n\n  const dispatch = useDispatch();\n  const loading = useSelector(state => state.auth.loading);\n  const [progress, setProgress] = useState(true);\n  useEffect(() => {\n    async function processAuth() {\n      const refreshToken = getToken('refreshToken');\n\n      if (window.location.pathname === '/save-token' || !refreshToken) {\n        setProgress(false);\n        return;\n      }\n\n      try {\n        const response = await authApi.existingRefreshToken(refreshToken);\n\n        if (!response.existingRefreshToken) {\n          dispatch(logout(false));\n          return;\n        }\n\n        dispatch(loadUser());\n      } catch (error) {\n        dispatch(logout());\n      } finally {\n        setProgress(false);\n      }\n    }\n\n    processAuth();\n  }, []);\n  return useMemo(() => ({\n    loading,\n    progress\n  }), [loading, progress]);\n}\n\n_s(useProgressAuth, \"XzTowlOfoifV5aQGJoDMT2wkLY0=\", false, function () {\n  return [useDispatch, useSelector];\n});","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/PosClient/src/routes/use-progress-auth.ts"],"names":["useEffect","useMemo","useState","useDispatch","useSelector","authApi","getToken","loadUser","logout","useProgressAuth","dispatch","loading","state","auth","progress","setProgress","processAuth","refreshToken","window","location","pathname","response","existingRefreshToken","error"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,OAApB,EAA6BC,QAA7B,QAA6C,OAA7C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,OAAP,MAAoB,iBAApB;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,QAAT,EAAmBC,MAAnB,QAAiC,mCAAjC;AAEA,OAAO,SAASC,eAAT,GAA2B;AAAA;;AAC9B,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;AACA,QAAMQ,OAAO,GAAGP,WAAW,CAAEQ,KAAD,IAAgBA,KAAK,CAACC,IAAN,CAAWF,OAA5B,CAA3B;AACA,QAAM,CAACG,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAU,IAAV,CAAxC;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAegB,WAAf,GAA6B;AACzB,YAAMC,YAAY,GAAGX,QAAQ,CAAC,cAAD,CAA7B;;AAEA,UAAIY,MAAM,CAACC,QAAP,CAAgBC,QAAhB,KAA6B,aAA7B,IAA8C,CAACH,YAAnD,EAAiE;AAC7DF,QAAAA,WAAW,CAAC,KAAD,CAAX;AACA;AACH;;AAGD,UAAI;AACA,cAAMM,QAAQ,GAAG,MAAMhB,OAAO,CAACiB,oBAAR,CAA6BL,YAA7B,CAAvB;;AAEA,YAAI,CAACI,QAAQ,CAACC,oBAAd,EAAoC;AAChCZ,UAAAA,QAAQ,CAACF,MAAM,CAAC,KAAD,CAAP,CAAR;AACA;AACH;;AAEDE,QAAAA,QAAQ,CAACH,QAAQ,EAAT,CAAR;AACH,OATD,CASE,OAAOgB,KAAP,EAAc;AACZb,QAAAA,QAAQ,CAACF,MAAM,EAAP,CAAR;AACH,OAXD,SAWU;AACNO,QAAAA,WAAW,CAAC,KAAD,CAAX;AACH;AACJ;;AAEDC,IAAAA,WAAW;AACd,GA3BQ,EA2BN,EA3BM,CAAT;AA6BA,SAAOf,OAAO,CAAC,OAAO;AAAEU,IAAAA,OAAF;AAAWG,IAAAA;AAAX,GAAP,CAAD,EAAgC,CAACH,OAAD,EAAUG,QAAV,CAAhC,CAAd;AACH;;GAnCeL,e;UACKN,W,EACDC,W","sourcesContent":["import { useEffect, useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport authApi from '../api/auth-api';\nimport { getToken } from '../api/token';\nimport { loadUser, logout } from '../features/auth/state/auth-slide';\n\nexport function useProgressAuth() {\n    const dispatch = useDispatch();\n    const loading = useSelector((state: any) => state.auth.loading);\n    const [progress, setProgress] = useState<boolean>(true);\n\n    useEffect(() => {\n        async function processAuth() {\n            const refreshToken = getToken('refreshToken');\n\n            if (window.location.pathname === '/save-token' || !refreshToken) {\n                setProgress(false);\n                return;\n            }\n\n\n            try {\n                const response = await authApi.existingRefreshToken(refreshToken);\n\n                if (!response.existingRefreshToken) {\n                    dispatch(logout(false));\n                    return;\n                }\n\n                dispatch(loadUser());\n            } catch (error) {\n                dispatch(logout());\n            } finally {\n                setProgress(false);\n            }\n        }\n\n        processAuth();\n    }, []);\n\n    return useMemo(() => ({ loading, progress }), [loading, progress]);\n}\n"]},"metadata":{},"sourceType":"module"}