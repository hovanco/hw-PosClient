{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport authApi from '../../../api/auth-api';\nimport { removeToken, getToken } from '../../../api/token';\nconst authSlide = createSlice({\n  name: 'auth',\n  initialState: {\n    loading: true,\n    isAuth: false,\n    isLogout: false,\n    user: null\n  },\n  reducers: {\n    loadUserStart(state) {\n      state.loading = true;\n    },\n\n    loadUserSuccess(state, action) {\n      state.loading = false;\n      state.user = action.payload;\n      state.isAuth = true;\n      state.isLogout = false;\n    },\n\n    loadUserFailed(state) {\n      removeToken();\n      state.loading = false;\n      state.user = null;\n      state.isAuth = false;\n    },\n\n    logoutAction(state, action) {\n      removeToken();\n      state.loading = false;\n      state.user = null;\n      state.isAuth = false;\n      state.isLogout = action.payload;\n    },\n\n    updateUserSuccess(state, action) {\n      state.user = action.payload;\n    }\n\n  }\n});\nconst {\n  actions,\n  reducer\n} = authSlide;\nexport const {\n  loadUserStart,\n  loadUserSuccess,\n  loadUserFailed,\n  logoutAction,\n  updateUserSuccess\n} = actions;\nexport const loadUser = () => async dispatch => {\n  try {\n    dispatch(loadUserStart());\n    const response = await authApi.getUser();\n    return dispatch(loadUserSuccess(response));\n  } catch (err) {\n    dispatch(loadUserFailed());\n  }\n};\nexport const logout = value => async dispatch => {\n  try {\n    const refreshToken = getToken('refreshToken');\n\n    if (refreshToken) {\n      await authApi.logout(refreshToken);\n    }\n  } catch (error) {} finally {\n    removeToken();\n    dispatch(logoutAction(typeof value === 'boolean' ? value : true));\n  }\n};\nexport default reducer;","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/PosClient/src/features/auth/state/auth-slide.ts"],"names":["createSlice","authApi","removeToken","getToken","authSlide","name","initialState","loading","isAuth","isLogout","user","reducers","loadUserStart","state","loadUserSuccess","action","payload","loadUserFailed","logoutAction","updateUserSuccess","actions","reducer","loadUser","dispatch","response","getUser","err","logout","value","refreshToken","error"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,oBAAtC;AASA,MAAMC,SAAS,GAAGJ,WAAW,CAAC;AAC1BK,EAAAA,IAAI,EAAE,MADoB;AAE1BC,EAAAA,YAAY,EAAE;AACVC,IAAAA,OAAO,EAAE,IADC;AAEVC,IAAAA,MAAM,EAAE,KAFE;AAGVC,IAAAA,QAAQ,EAAE,KAHA;AAIVC,IAAAA,IAAI,EAAE;AAJI,GAFY;AAQ1BC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,aAAa,CAACC,KAAD,EAAQ;AACjBA,MAAAA,KAAK,CAACN,OAAN,GAAgB,IAAhB;AACH,KAHK;;AAINO,IAAAA,eAAe,CAACD,KAAD,EAAQE,MAAR,EAAgB;AAC3BF,MAAAA,KAAK,CAACN,OAAN,GAAgB,KAAhB;AACAM,MAAAA,KAAK,CAACH,IAAN,GAAaK,MAAM,CAACC,OAApB;AACAH,MAAAA,KAAK,CAACL,MAAN,GAAe,IAAf;AACAK,MAAAA,KAAK,CAACJ,QAAN,GAAiB,KAAjB;AACH,KATK;;AAUNQ,IAAAA,cAAc,CAACJ,KAAD,EAAQ;AAClBX,MAAAA,WAAW;AAEXW,MAAAA,KAAK,CAACN,OAAN,GAAgB,KAAhB;AACAM,MAAAA,KAAK,CAACH,IAAN,GAAa,IAAb;AACAG,MAAAA,KAAK,CAACL,MAAN,GAAe,KAAf;AACH,KAhBK;;AAiBNU,IAAAA,YAAY,CAACL,KAAD,EAAQE,MAAR,EAAgB;AACxBb,MAAAA,WAAW;AAEXW,MAAAA,KAAK,CAACN,OAAN,GAAgB,KAAhB;AACAM,MAAAA,KAAK,CAACH,IAAN,GAAa,IAAb;AACAG,MAAAA,KAAK,CAACL,MAAN,GAAe,KAAf;AACAK,MAAAA,KAAK,CAACJ,QAAN,GAAiBM,MAAM,CAACC,OAAxB;AACH,KAxBK;;AAyBNG,IAAAA,iBAAiB,CAACN,KAAD,EAAQE,MAAR,EAAgB;AAC7BF,MAAAA,KAAK,CAACH,IAAN,GAAaK,MAAM,CAACC,OAApB;AACH;;AA3BK;AARgB,CAAD,CAA7B;AAuCA,MAAM;AAAEI,EAAAA,OAAF;AAAWC,EAAAA;AAAX,IAAuBjB,SAA7B;AAEA,OAAO,MAAM;AAAEQ,EAAAA,aAAF;AAAiBE,EAAAA,eAAjB;AAAkCG,EAAAA,cAAlC;AAAkDC,EAAAA,YAAlD;AAAgEC,EAAAA;AAAhE,IACTC,OADG;AAGP,OAAO,MAAME,QAAQ,GAAG,MAAM,MAAOC,QAAP,IAAyB;AACnD,MAAI;AACAA,IAAAA,QAAQ,CAACX,aAAa,EAAd,CAAR;AAEA,UAAMY,QAAQ,GAAG,MAAMvB,OAAO,CAACwB,OAAR,EAAvB;AAEA,WAAOF,QAAQ,CAACT,eAAe,CAACU,QAAD,CAAhB,CAAf;AACH,GAND,CAME,OAAOE,GAAP,EAAY;AACVH,IAAAA,QAAQ,CAACN,cAAc,EAAf,CAAR;AACH;AACJ,CAVM;AAYP,OAAO,MAAMU,MAAM,GAAIC,KAAD,IAAqB,MAAOL,QAAP,IAAyB;AAChE,MAAI;AACA,UAAMM,YAAY,GAAG1B,QAAQ,CAAC,cAAD,CAA7B;;AAEA,QAAI0B,YAAJ,EAAkB;AACd,YAAM5B,OAAO,CAAC0B,MAAR,CAAeE,YAAf,CAAN;AACH;AACJ,GAND,CAME,OAAOC,KAAP,EAAc,CACf,CAPD,SAOU;AACN5B,IAAAA,WAAW;AAEXqB,IAAAA,QAAQ,CAACL,YAAY,CAAC,OAAOU,KAAP,KAAiB,SAAjB,GAA6BA,KAA7B,GAAqC,IAAtC,CAAb,CAAR;AACH;AACJ,CAbM;AAeP,eAAeP,OAAf","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport authApi from '../../../api/auth-api';\nimport { removeToken, getToken } from '../../../api/token';\n\nexport interface IAuth {\n    loading: boolean;\n    isAuth: boolean;\n    isLogout: boolean;\n    user: any;\n}\n\nconst authSlide = createSlice({\n    name: 'auth',\n    initialState: {\n        loading: true,\n        isAuth: false,\n        isLogout: false,\n        user: null,\n    },\n    reducers: {\n        loadUserStart(state) {\n            state.loading = true;\n        },\n        loadUserSuccess(state, action) {\n            state.loading = false;\n            state.user = action.payload;\n            state.isAuth = true;\n            state.isLogout = false;\n        },\n        loadUserFailed(state) {\n            removeToken();\n\n            state.loading = false;\n            state.user = null;\n            state.isAuth = false;\n        },\n        logoutAction(state, action) {\n            removeToken();\n\n            state.loading = false;\n            state.user = null;\n            state.isAuth = false;\n            state.isLogout = action.payload;\n        },\n        updateUserSuccess(state, action) {\n            state.user = action.payload;\n        },\n    },\n});\n\nconst { actions, reducer } = authSlide;\n\nexport const { loadUserStart, loadUserSuccess, loadUserFailed, logoutAction, updateUserSuccess } =\n    actions;\n\nexport const loadUser = () => async (dispatch: any) => {\n    try {\n        dispatch(loadUserStart());\n\n        const response = await authApi.getUser();\n\n        return dispatch(loadUserSuccess(response));\n    } catch (err) {\n        dispatch(loadUserFailed());\n    }\n};\n\nexport const logout = (value?: boolean) => async (dispatch: any) => {\n    try {\n        const refreshToken = getToken('refreshToken');\n\n        if (refreshToken) {\n            await authApi.logout(refreshToken);\n        }\n    } catch (error) {\n    } finally {\n        removeToken();\n\n        dispatch(logoutAction(typeof value === 'boolean' ? value : true));\n    }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}