{"ast":null,"code":"var _jsxFileName = \"/Users/mac3/Desktop/workspace/PosClient/src/features/dashboard/components/toggle-product-list/product-variant.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { Table, Tag } from 'antd';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { getStock } from '../../../../api/stock-api';\nimport { TextEllipsis } from '../../../../components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst useStock = ({\n  productId,\n  parentId\n}) => {\n  _s();\n\n  const store = useSelector(state => state.store.store);\n  const [loading, setLoading] = useState(true);\n  const [stocks, setStocks] = useState([]);\n  useEffect(() => {\n    async function loadStocks() {\n      try {\n        setLoading(true);\n        const response = await getStock({\n          storeId: store._id,\n          parentId,\n          productId\n        });\n        setStocks(response.data);\n      } catch (error) {} finally {\n        setLoading(false);\n      }\n    }\n\n    if (store._id) {\n      loadStocks();\n    }\n\n    return () => {};\n  }, []);\n  const value = useMemo(() => ({\n    loading,\n    stocks\n  }), [loading, stocks]);\n  return value;\n};\n\n_s(useStock, \"jTfwK7og8xGU0Z0bjtVK1D5wevs=\", false, function () {\n  return [useSelector];\n});\n\nconst ProductVariant = ({\n  product\n}) => {\n  _s2();\n\n  const isBlank = !(product === null || product === void 0 ? void 0 : product.variants) || (product === null || product === void 0 ? void 0 : product.variants.length) === 0;\n  const params = isBlank ? {\n    productId: product._id\n  } : {\n    parentId: product._id\n  };\n  const {\n    loading,\n    stocks\n  } = useStock(params);\n  const warehouses = useSelector(state => state.store.warehouses);\n\n  const renderVariants = () => {\n    let columns = warehouses.map((item, idx) => {\n      return {\n        title: /*#__PURE__*/_jsxDEV(TextEllipsis, {\n          width: \"100%\",\n          children: item.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 24\n        }, this),\n        dataIndex: '',\n        align: 'center',\n        key: item._id,\n        width: 150,\n        render: record => /*#__PURE__*/_jsxDEV(\"span\", {\n          children: record[item === null || item === void 0 ? void 0 : item._id] || 0\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 42\n        }, this)\n      };\n    });\n\n    if (!isBlank) {\n      columns.unshift({\n        title: '',\n        dataIndex: 'productId',\n        width: 150,\n        align: 'center',\n        key: 'name',\n        fixed: 'left',\n        render: productId => /*#__PURE__*/_jsxDEV(Tag, {\n          children: productId.attributes.map(item => item.tags[0]).join(' - ')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this)\n      });\n    }\n\n    const getDataSource = () => {\n      var _product$variants;\n\n      if (!product.variants || ((_product$variants = product.variants) === null || _product$variants === void 0 ? void 0 : _product$variants.length) === 0) {\n        let localStock = {\n          _id: product._id,\n          productId: product\n        };\n\n        if (stocks.length > 0) {\n          let stockFilteredByProductId = stocks.filter(item => item.productId._id === product._id);\n          localStock = stockFilteredByProductId.reduce((prevValue, currValue) => ({ ...prevValue,\n            [currValue.warehouseId]: currValue.quantity\n          }), localStock);\n        }\n\n        return [localStock];\n      }\n\n      let newLocalStocks = product.variants.map(variant => {\n        let localStock = {\n          _id: variant._id,\n          productId: variant\n        };\n\n        if (stocks.length > 0) {\n          let stockFilteredByProductId = stocks.filter(item => item.productId._id === variant._id);\n          localStock = stockFilteredByProductId.reduce((prevValue, currValue) => ({ ...prevValue,\n            [currValue.warehouseId]: currValue.quantity\n          }), localStock);\n        }\n\n        return localStock;\n      });\n      return newLocalStocks;\n    };\n\n    return /*#__PURE__*/_jsxDEV(Table, {\n      columns: columns,\n      dataSource: getDataSource(),\n      loading: loading,\n      pagination: false,\n      rowKey: \"_id\",\n      bordered: true,\n      scroll: {\n        x: 600,\n        y: 300\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"variants\",\n    children: renderVariants()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 12\n  }, this);\n};\n\n_s2(ProductVariant, \"oY5aiBUop/DuW7P0+L+fL8UmG7s=\", false, function () {\n  return [useStock, useSelector];\n});\n\n_c = ProductVariant;\nexport default ProductVariant;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductVariant\");","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/PosClient/src/features/dashboard/components/toggle-product-list/product-variant.tsx"],"names":["Table","Tag","React","useEffect","useMemo","useState","useSelector","getStock","TextEllipsis","useStock","productId","parentId","store","state","loading","setLoading","stocks","setStocks","loadStocks","response","storeId","_id","data","error","value","ProductVariant","product","isBlank","variants","length","params","warehouses","renderVariants","columns","map","item","idx","title","name","dataIndex","align","key","width","render","record","unshift","fixed","attributes","tags","join","getDataSource","localStock","stockFilteredByProductId","filter","reduce","prevValue","currValue","warehouseId","quantity","newLocalStocks","variant","x","y"],"mappings":"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","sourcesContent":["import { Table, Tag } from 'antd';\nimport React, { FC, useEffect, useMemo, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { getStock } from '../../../../api/stock-api';\nimport { IProduct } from '../../../../collections/product';\nimport { IWarehouse } from '../../../../collections/warehouse';\nimport { Loading, TextEllipsis } from '../../../../components';\n\ninterface Props {\n    product: IProduct;\n}\n\nconst useStock = ({ productId, parentId }: { productId?: string; parentId?: string }) => {\n    const store = useSelector((state: any) => state.store.store);\n    const [loading, setLoading] = useState(true);\n    const [stocks, setStocks] = useState<any[]>([]);\n\n    useEffect(() => {\n        async function loadStocks() {\n            try {\n                setLoading(true);\n                const response = await getStock({\n                    storeId: store._id,\n                    parentId,\n                    productId,\n                });\n                setStocks(response.data);\n            } catch (error) {\n            } finally {\n                setLoading(false);\n            }\n        }\n        if (store._id) {\n            loadStocks();\n        }\n        return () => {};\n    }, []);\n\n    const value = useMemo(() => ({ loading, stocks }), [loading, stocks]);\n    return value;\n};\n\nconst ProductVariant: FC<Props> = ({ product }) => {\n    const isBlank = !product?.variants || product?.variants.length === 0;\n    const params = isBlank ? { productId: product._id } : { parentId: product._id };\n\n    const { loading, stocks } = useStock(params);\n    const warehouses = useSelector((state: any) => state.store.warehouses);\n\n    const renderVariants = () => {\n        let columns: any = warehouses.map((item: IWarehouse, idx: number) => {\n            return {\n                title: <TextEllipsis width='100%'>{item.name}</TextEllipsis>,\n                dataIndex: '',\n                align: 'center',\n                key: item._id,\n                width: 150,\n                render: (record: any) => <span>{record[item?._id as string] || 0}</span>,\n            };\n        });\n\n        if (!isBlank) {\n            columns.unshift({\n                title: '',\n                dataIndex: 'productId',\n                width: 150,\n                align: 'center',\n                key: 'name',\n                fixed: 'left',\n                render: (productId: any) => (\n                    <Tag>{productId.attributes.map((item: any) => item.tags[0]).join(' - ')}</Tag>\n                ),\n            });\n        }\n\n        const getDataSource = () => {\n            if (!product.variants || product.variants?.length === 0) {\n                let localStock = {\n                    _id: product._id,\n                    productId: product,\n                };\n\n                if (stocks.length > 0) {\n                    let stockFilteredByProductId = stocks.filter(\n                        (item: any) => item.productId._id === product._id\n                    );\n\n                    localStock = stockFilteredByProductId.reduce(\n                        (prevValue, currValue: any) => ({\n                            ...prevValue,\n                            [currValue.warehouseId]: currValue.quantity,\n                        }),\n                        localStock\n                    );\n                }\n\n                return [localStock];\n            }\n\n            let newLocalStocks = (product.variants as any[]).map((variant: any) => {\n                let localStock = {\n                    _id: variant._id,\n                    productId: variant,\n                };\n\n                if (stocks.length > 0) {\n                    let stockFilteredByProductId = stocks.filter(\n                        (item: any) => item.productId._id === variant._id\n                    );\n\n                    localStock = stockFilteredByProductId.reduce(\n                        (prevValue, currValue: any) => ({\n                            ...prevValue,\n                            [currValue.warehouseId]: currValue.quantity,\n                        }),\n                        localStock\n                    );\n                }\n\n                return localStock;\n            });\n\n            return newLocalStocks;\n        };\n\n        return (\n            <Table\n                columns={columns}\n                dataSource={getDataSource()}\n                loading={loading}\n                pagination={false}\n                rowKey='_id'\n                bordered\n                scroll={{ x: 600, y: 300 }}\n            />\n        );\n    };\n\n    return <div className='variants'>{renderVariants()}</div>;\n};\n\nexport default ProductVariant;\n"]},"metadata":{},"sourceType":"module"}