{"ast":null,"code":"var _jsxFileName = \"/Users/mac3/Desktop/workspace/PosClient/src/features/dashboard/pages/order/state/context.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useContext, useMemo } from 'react';\nimport { useImmerReducer } from 'use-immer';\nimport types from './types';\nimport { initialState, reducer } from './reducer';\nimport orderApi from '../../../../../api/order-api';\nimport { useSelector } from 'react-redux';\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialContext = {\n  state: initialState,\n  dispatch: () => {}\n};\nconst OrdersContext = /*#__PURE__*/createContext(initialContext);\n\nconst ProvicerOrderContext = ({\n  children\n}) => {\n  _s();\n\n  const [state, dispatch] = useImmerReducer(reducer, initialState);\n  const value = useMemo(() => ({\n    state,\n    dispatch\n  }), [state, dispatch]);\n  return /*#__PURE__*/_jsxDEV(OrdersContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 12\n  }, this);\n};\n\n_s(ProvicerOrderContext, \"gC2VGmEwTnbB1UxRsJQVzhdEP/g=\", false, function () {\n  return [useImmerReducer];\n});\n\n_c = ProvicerOrderContext;\n\nconst useOrders = () => {\n  _s2();\n\n  const store = useSelector(state => state.store.store);\n  const value = useContext(OrdersContext);\n  const {\n    state,\n    dispatch\n  } = value;\n\n  const setLoading = () => {\n    dispatch({\n      type: types.LOADING\n    });\n  };\n\n  const searchOrders = async text => {\n    await dispatch({\n      type: types.CHANGE_SEARCH,\n      payload: text\n    });\n    await getOrders({\n      search: text,\n      type: 'search'\n    });\n  };\n\n  const getOrders = async ({\n    search,\n    page,\n    type,\n    time\n  }) => {\n    try {\n      const startTime = !time ? undefined : typeof time === 'string' ? Math.floor(moment(time).startOf('day').valueOf()) : Math.floor(moment(time[0]).startOf('day').valueOf());\n      const endTime = !time ? undefined : typeof time === 'string' ? Math.floor(moment(time).endOf('day').valueOf()) : Math.floor(moment(time[1]).endOf('day').valueOf());\n      const response = await orderApi.getOrders({\n        storeId: store._id,\n        search,\n        page,\n        startTime,\n        endTime\n      });\n      const typeAction = type === 'search' ? types.SEARCH_ORDERS : types.LOAD_ORDERS;\n      dispatch({\n        type: typeAction,\n        payload: {\n          orders: response.data,\n          total: response.total\n        }\n      });\n    } catch (error) {\n      dispatch({\n        type: types.LOAD_ORDERS,\n        payload: []\n      });\n    }\n  };\n\n  const selectOrder = order => {\n    dispatch({\n      type: types.SELECT_ORDER,\n      payload: order\n    });\n  };\n\n  const setPage = async page => {\n    await dispatch({\n      type: types.SET_PAGE,\n      payload: page\n    });\n    await getOrders({\n      search: state.search,\n      page: page\n    });\n  };\n\n  const selectTime = async data => {\n    await dispatch({\n      type: types.SELECT_TIME,\n      payload: data\n    });\n    await getOrders({\n      search: state.search,\n      time: data.time,\n      type: 'search'\n    });\n  };\n\n  return { ...state,\n    searchOrders,\n    setLoading,\n    getOrders,\n    selectOrder,\n    setPage,\n    selectTime\n  };\n};\n\n_s2(useOrders, \"UDMAgZiYKm3/sTe6wJDnifGQIP0=\", false, function () {\n  return [useSelector];\n});\n\nexport { ProvicerOrderContext, useOrders };\n\nvar _c;\n\n$RefreshReg$(_c, \"ProvicerOrderContext\");","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/PosClient/src/features/dashboard/pages/order/state/context.tsx"],"names":["React","createContext","useContext","useMemo","useImmerReducer","types","initialState","reducer","orderApi","useSelector","moment","initialContext","state","dispatch","OrdersContext","ProvicerOrderContext","children","value","useOrders","store","setLoading","type","LOADING","searchOrders","text","CHANGE_SEARCH","payload","getOrders","search","page","time","startTime","undefined","Math","floor","startOf","valueOf","endTime","endOf","response","storeId","_id","typeAction","SEARCH_ORDERS","LOAD_ORDERS","orders","data","total","error","selectOrder","order","SELECT_ORDER","setPage","SET_PAGE","selectTime","SELECT_TIME"],"mappings":"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","sourcesContent":["import React, { createContext, FC, ReactNode, useContext, useMemo } from 'react';\nimport { useImmerReducer } from 'use-immer';\nimport types from './types';\nimport { IContext } from './interface';\nimport { initialState, reducer } from './reducer';\nimport orderApi from '../../../../../api/order-api';\nimport { useSelector } from 'react-redux';\nimport moment from 'moment';\n\nconst initialContext = {\n    state: initialState,\n    dispatch: () => {},\n};\n\nconst OrdersContext = createContext<IContext>(initialContext);\n\ninterface Props {\n    children: ReactNode;\n}\n\nconst ProvicerOrderContext: FC<Props> = ({ children }) => {\n    const [state, dispatch] = useImmerReducer(reducer, initialState);\n    const value = useMemo(() => ({ state, dispatch }), [state, dispatch]);\n\n    return <OrdersContext.Provider value={value}>{children}</OrdersContext.Provider>;\n};\n\nconst useOrders = () => {\n    const store = useSelector((state: any) => state.store.store);\n\n    const value = useContext(OrdersContext);\n\n    const { state, dispatch } = value;\n\n    const setLoading = () => {\n        dispatch({\n            type: types.LOADING,\n        });\n    };\n\n    const searchOrders = async (text: string) => {\n        await dispatch({\n            type: types.CHANGE_SEARCH,\n            payload: text,\n        });\n\n        await getOrders({\n            search: text,\n            type: 'search',\n        });\n    };\n\n    const getOrders = async ({\n        search,\n        page,\n        type,\n        time,\n    }: {\n        search?: string;\n        page?: number;\n        type?: string;\n        time?: string | string[];\n    }) => {\n        try {\n            const startTime = !time\n                ? undefined\n                : typeof time === 'string'\n                ? Math.floor(moment(time).startOf('day').valueOf())\n                : Math.floor(moment(time[0]).startOf('day').valueOf());\n            const endTime = !time\n                ? undefined\n                : typeof time === 'string'\n                ? Math.floor(moment(time).endOf('day').valueOf())\n                : Math.floor(moment(time[1]).endOf('day').valueOf());\n\n            const response = await orderApi.getOrders({\n                storeId: store._id,\n                search,\n                page,\n                startTime,\n                endTime,\n            });\n\n            const typeAction = type === 'search' ? types.SEARCH_ORDERS : types.LOAD_ORDERS;\n\n            dispatch({\n                type: typeAction,\n                payload: {\n                    orders: response.data,\n                    total: response.total,\n                },\n            });\n        } catch (error) {\n            dispatch({\n                type: types.LOAD_ORDERS,\n                payload: [],\n            });\n        }\n    };\n\n    const selectOrder = (order: any) => {\n        dispatch({\n            type: types.SELECT_ORDER,\n            payload: order,\n        });\n    };\n\n    const setPage = async (page: number) => {\n        await dispatch({\n            type: types.SET_PAGE,\n            payload: page,\n        });\n\n        await getOrders({\n            search: state.search,\n            page: page,\n        });\n    };\n\n    const selectTime = async (data: { time?: string | string[]; typeTime?: string }) => {\n        await dispatch({\n            type: types.SELECT_TIME,\n            payload: data,\n        });\n\n        await getOrders({\n            search: state.search,\n            time: data.time,\n            type: 'search',\n        });\n    };\n\n    return {\n        ...state,\n        searchOrders,\n        setLoading,\n        getOrders,\n        selectOrder,\n        setPage,\n\n        selectTime,\n    };\n};\nexport { ProvicerOrderContext, useOrders };\n"]},"metadata":{},"sourceType":"module"}