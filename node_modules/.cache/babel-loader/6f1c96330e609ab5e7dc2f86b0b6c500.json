{"ast":null,"code":"import axios from './axios-client';\nconst basePath = '/store/v1/stores';\nconst productApi = {\n  getProducts: async ({\n    storeId,\n    page,\n    limit,\n    categoryId,\n    search,\n    sort,\n    direction,\n    warehouseId,\n    withQuantity,\n    variant\n  }) => {\n    const response = await axios({\n      method: 'GET',\n      url: `${basePath}/${storeId}/products`,\n      params: {\n        page,\n        limit,\n        categoryId,\n        search,\n        sort,\n        direction,\n        warehouseId,\n        withQuantity,\n        variant\n      }\n    });\n    return response;\n  },\n  getProduct: async ({\n    storeId,\n    productId\n  }) => {\n    const url = `${basePath}/${storeId}/products/${productId}`;\n    const response = await axios({\n      method: 'GET',\n      url\n    });\n    return response;\n  },\n  updateProduct: async (storeId, productId, form) => {\n    const response = await axios({\n      method: 'PUT',\n      url: `${basePath}/${storeId}/products/${productId}`,\n      data: form\n    });\n    return response;\n  },\n  deleteProduct: async (storeId, productId) => {\n    const response = await axios({\n      method: 'DELETE',\n      url: `${basePath}/${storeId}/products/${productId}`\n    });\n    return response;\n  },\n  createProduct: async (storeId, form) => {\n    const response = await axios({\n      method: 'POST',\n      url: `${basePath}/${storeId}/products`,\n      data: form\n    });\n    return response;\n  },\n  getAttributes: async storeId => {\n    const response = await axios({\n      method: 'GET',\n      url: `${basePath}/${storeId}/attributes`\n    });\n    return response;\n  },\n  createAttribute: async (storeId, attribute) => {\n    const response = await axios({\n      method: 'POST',\n      url: `${basePath}/${storeId}/attributes`,\n      data: attribute\n    });\n    return response;\n  },\n  editVariant: async (storeId, productId, productVariantId, variant) => {\n    const response = await axios({\n      method: 'PUT',\n      url: `${basePath}/${storeId}/products/${productId}/product-variants/${productVariantId}`,\n      data: variant\n    });\n    return response;\n  },\n  addAttributeProductVariants: async (storeId, productId, attributes) => {\n    const response = await axios({\n      method: 'PUT',\n      url: `${basePath}/${storeId}/products/${productId}/attributes/add`,\n      data: {\n        attributes\n      }\n    });\n    return response;\n  },\n  deleteVariant: async (storeId, productId, productVariantId) => {\n    const response = await axios({\n      method: 'DELETE',\n      url: `${basePath}/${storeId}/products/${productId}/product-variants/${productVariantId}`\n    });\n    return response;\n  },\n  replaceAttributeByNewOne: async (storeId, productId, attributes) => {\n    const response = await axios({\n      method: 'PUT',\n      url: `${basePath}/${storeId}/products/${productId}/attributes/replace`,\n      data: {\n        attributes\n      }\n    });\n    return response;\n  },\n  changeOrderAttributesAndTags: async (storeId, productId, attributes) => {\n    const response = await axios({\n      method: 'PUT',\n      url: `${basePath}/${storeId}/products/${productId}/attributes/sort`,\n      data: {\n        attributes\n      }\n    });\n    return response;\n  },\n  createVariant: async (storeId, productId, variant) => {\n    const response = await axios({\n      method: 'POST',\n      url: `${basePath}/${storeId}/products/${productId}/product-variants`,\n      data: variant\n    });\n    return response;\n  },\n  updateVariant: async (storeId, productId, variantId, variant) => {\n    const response = await axios({\n      method: 'PUT',\n      url: `${basePath}/${storeId}/products/${productId}/product-variants/${variantId}`,\n      data: variant\n    });\n    return response;\n  }\n};\nexport default productApi;","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/PosClient/src/api/product-api.ts"],"names":["axios","basePath","productApi","getProducts","storeId","page","limit","categoryId","search","sort","direction","warehouseId","withQuantity","variant","response","method","url","params","getProduct","productId","updateProduct","form","data","deleteProduct","createProduct","getAttributes","createAttribute","attribute","editVariant","productVariantId","addAttributeProductVariants","attributes","deleteVariant","replaceAttributeByNewOne","changeOrderAttributesAndTags","createVariant","updateVariant","variantId"],"mappings":"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","sourcesContent":["import axios from './axios-client';\nimport { IProduct, ProductAttribute, Product } from '../collections/product';\n\nconst basePath = '/store/v1/stores';\n\nconst productApi = {\n    getProducts: async ({\n        storeId,\n        page,\n        limit,\n        categoryId,\n        search,\n        sort,\n        direction,\n        warehouseId,\n        withQuantity,\n        variant,\n    }: {\n        storeId: string;\n        page: number;\n        limit: number;\n        categoryId?: string;\n        search?: string;\n        sort?: string;\n        direction?: string;\n        warehouseId?: string;\n        withQuantity?: boolean;\n        variant?: boolean;\n    }): Promise<any> => {\n        const response = await axios({\n            method: 'GET',\n            url: `${basePath}/${storeId}/products`,\n            params: {\n                page,\n                limit,\n                categoryId,\n                search,\n                sort,\n                direction,\n                warehouseId,\n                withQuantity,\n                variant,\n            },\n        });\n\n        return response;\n    },\n\n    getProduct: async ({\n        storeId,\n        productId,\n    }: {\n        storeId: string;\n        productId: string;\n    }): Promise<any> => {\n        const url = `${basePath}/${storeId}/products/${productId}`;\n\n        const response = await axios({\n            method: 'GET',\n            url,\n        });\n\n        return response;\n    },\n\n    updateProduct: async (storeId: string, productId: string, form: any): Promise<any> => {\n        const response = await axios({\n            method: 'PUT',\n            url: `${basePath}/${storeId}/products/${productId}`,\n            data: form,\n        });\n\n        return response;\n    },\n\n    deleteProduct: async (storeId: string, productId: string): Promise<any> => {\n        const response = await axios({\n            method: 'DELETE',\n            url: `${basePath}/${storeId}/products/${productId}`,\n        });\n\n        return response;\n    },\n\n    createProduct: async (storeId: string, form: IProduct): Promise<any> => {\n        const response = await axios({\n            method: 'POST',\n            url: `${basePath}/${storeId}/products`,\n            data: form,\n        });\n\n        return response;\n    },\n\n    getAttributes: async (storeId: string): Promise<any> => {\n        const response = await axios({\n            method: 'GET',\n            url: `${basePath}/${storeId}/attributes`,\n        });\n\n        return response;\n    },\n\n    createAttribute: async (storeId: string, attribute: ProductAttribute): Promise<any> => {\n        const response = await axios({\n            method: 'POST',\n            url: `${basePath}/${storeId}/attributes`,\n            data: attribute,\n        });\n\n        return response;\n    },\n\n    editVariant: async (\n        storeId: string,\n        productId: string,\n        productVariantId: string,\n        variant: any\n    ): Promise<any> => {\n        const response = await axios({\n            method: 'PUT',\n            url: `${basePath}/${storeId}/products/${productId}/product-variants/${productVariantId}`,\n            data: variant,\n        });\n\n        return response;\n    },\n\n    addAttributeProductVariants: async (\n        storeId: string,\n        productId: string,\n        attributes: any[]\n    ): Promise<any> => {\n        const response = await axios({\n            method: 'PUT',\n            url: `${basePath}/${storeId}/products/${productId}/attributes/add`,\n            data: { attributes },\n        });\n\n        return response;\n    },\n\n    deleteVariant: async (\n        storeId: string,\n        productId: string,\n        productVariantId: string\n    ): Promise<any> => {\n        const response = await axios({\n            method: 'DELETE',\n            url: `${basePath}/${storeId}/products/${productId}/product-variants/${productVariantId}`,\n        });\n\n        return response;\n    },\n\n    replaceAttributeByNewOne: async (\n        storeId: string,\n        productId: string,\n        attributes: any[]\n    ): Promise<any> => {\n        const response = await axios({\n            method: 'PUT',\n            url: `${basePath}/${storeId}/products/${productId}/attributes/replace`,\n            data: { attributes },\n        });\n\n        return response;\n    },\n\n    changeOrderAttributesAndTags: async (\n        storeId: string,\n        productId: string,\n        attributes: any[]\n    ): Promise<any> => {\n        const response = await axios({\n            method: 'PUT',\n            url: `${basePath}/${storeId}/products/${productId}/attributes/sort`,\n            data: { attributes },\n        });\n\n        return response;\n    },\n\n    createVariant: async (storeId: string, productId: string, variant: Product): Promise<any> => {\n        const response = await axios({\n            method: 'POST',\n            url: `${basePath}/${storeId}/products/${productId}/product-variants`,\n            data: variant,\n        });\n\n        return response;\n    },\n\n    updateVariant: async (\n        storeId: string,\n        productId: string,\n        variantId: string,\n        variant: Product\n    ): Promise<any> => {\n        const response = await axios({\n            method: 'PUT',\n            url: `${basePath}/${storeId}/products/${productId}/product-variants/${variantId}`,\n            data: variant,\n        });\n\n        return response;\n    },\n};\n\nexport default productApi;\n"]},"metadata":{},"sourceType":"module"}